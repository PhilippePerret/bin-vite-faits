# encoding: UTF-8
=begin

  Module pratique de gestion des Files/dossiers.

  Requis
  ------
    * Une m√©thode 'error' qui re√ßoit un message d'erreur ({String})
      et retourne false
    * Une m√©thode 'notice' qui re√ßoit un message de confirmation ({String})
      et l'√©crit (en vert par exemple) en console.

=end

class IO
class << self

  # D√©truit un √©l√©ment en s'assurant qu'il existe et qu'il n'existe plus
  # √† la fin.
  # Retourne TRUE en cas de succ√®s, false dans le cas contraire.
  # @param {String} path
  # Params:
  #   +path+:: [String] Le chemin d'acc√®s √† l'√©l√©ment √† d√©truire
  def remove_with_care(path, thing = nil, interactive = true)
    (path && path != '') || raise(ArgumentError.new("Le chemin d'acc√®s doit imp√©rativement √™tre d√©fini."))
    (path.start_with?('/') && path.start_with?(Dir.home)) || raise(ArgumentError.new("Par mesure de prudence, il est interdit de d√©truire un √©l√©ment hors du ‚Äúhome‚Äù de l'utilisateur."))
    thing ||= "dossier/fichier"
    if File.exists?(path)
      if File.directory?(path)
        FileUtils.rm_rf(path)
      else
        FileUtils.remove(path)
      end
      if File.exists?(path)
        error "üö´¬†¬†Le #{thing} (*) n'a pas pu √™tre d√©truit‚Ä¶\n(*) #{path}"
        return false
      else
        notice "üëç¬†¬†Le #{thing} a √©t√© d√©truit." if interactive
        return true
      end
    else
      error "üö´¬†¬†Impossible de trouver le #{thing} (*) √† d√©truire‚Ä¶\n(*) #{path}"
      return false
    end
  rescue Exception => e
    error e.message
    error "Je ne proc√®de pas √† la destruction demand√©e."
  end #/remove_with_case
end #/<< self
end #/IO

# encoding: UTF-8
=begin

  Module d'assistance √† la cr√©ation de la vid√©o des
  op√©rations du tutoriel.

=end


# Assistant pour la r√©alisation des op√©rations, en les lisant
# Note : pour l'utiliser ailleurs que dans l'assistant g√©n√©ral,
# il faut l'entourer d'un rescue¬†:
#   begin
#     require_module('operations/record')
#     exec
#   rescue NotAnError => e
#     e.puts_error_if_message
#   end
#
# Note : les +options+ ne servent √† rien, pour le moment.
#
def exec(options=nil)

  # On s'arr√™te l√† si le fichier des op√©rations est invalide
  return false unless check_operations

  # Ouvrir toujours le projet Scrivener (en r√©alit√© : une copie du
  # projet pr√©par√©)
  open_something('scrivener') || raise(NotAnError.new)

  clear
  `open -a Terminal`
  notice "=== Enregistrement des op√©rations ==="

  # Si un fichier capture.mov existe d√©j√†, on demande √† l'utilisateur
  # si on doit le d√©truire pour le recommencer
  if operations_recorded?
    ask_for_new_version_or_destroy_record_operations
  end

  # Pour savoir si on doit enregistrer avec l'assistant des
  # op√©rations ou sans.
  avec_assistant_operations = operations_defined?


  puts <<-EOT

Je vais t'accompagner au cours des op√©rations
√† ex√©cuter.

√Ä tout moment, si √ßa ne se passe pas bien, tu
peux interrompre la capture √† l'aide de CTRL-C.

  EOT

  if avec_assistant_operations
    puts <<-EOT
  Les op√©rations du tutoriel √©tant d√©finies, je vais
  pouvoir t'accompagner dans le d√©tail.

    EOT
  else
    puts <<-EOT
  S'il y avait un fichier d√©finissant les op√©rations,
  je pourrais t'accompagner beaucoup mieux."

    EOT
  end

  only_extrait = !!COMMAND.options[:range]

  if only_extrait
    if avec_assistant_operations
      puts <<-EOT

Choisis le rang des op√©rations √† jouer :
----------------------------------------
(indique 'premier num√©ro-dernier num√©ro compris'
 par exemple '3-5' pour jouer les op√©rataions 3,
 4 et 5)

      EOT
      # On affiche les op√©rations avec un num√©ro
      nombre_operations = operations.count
      last_index_operations = nombre_operations - 1
      operations.each_with_index do |ope, idx|

        puts "#{(idx+1).to_s.rjust(3)}. #{ope.titre}"

      end

      range = prompt("Rang √† utiliser")
      if range.gsub(/[0-9\-]/,'') != ''
        raise NotAnError.new("Ce rang est mal format√©. Il devrait √™tre 'F-L' o√π 'F' est le num√©ro de la premi√®re op√©ration et 'L' le num√©ro de la derni√®re (par exemple '3-8').")
      end
      fromOpe, toOpe = range.split('-').collect{|n| n.to_i - 1 }
      if fromOpe < 0 || fromOpe > last_index_operations
        raise NotAnError.new("L'index #{fromOpe} est trop grand pour un index d'op√©ration. Je renonce.")
      end
      if toOpe < fromOpe || toOpe > last_index_operations
        raise NotAnError.new("L'index de fin #{toOpe} est invalide (soit sup√©rieur au premier soit plus grand que le dernier index possible). Fais-gaffe, dude‚Ä¶")
      end
      played_operations = operations[fromOpe..toOpe]

    else
      error "Les op√©rations ne sont pas d√©finies. L'option\n`-r/--range` est superflue."
    end
  end

  yesOrStop("Pr√™t √† commencer ?‚Ä¶")

  is_first_time = true

  for_quick_test = COMMAND.options[:test]

  begin #Boucle jusqu'√† ce qu'on arrive √† une vid√©o acceptable

    unless for_quick_test
      dire("Active Scrivener et masque les autres applications avec Commande, ALTE, H")
      sleep 3 if is_first_time
      dire("Active la capture et r√®gle les dimensions √† #{CAPTURE_WIDTH} par #{CAPTURE_HEIGHT}")
    end
    notice "Dimensions de l'√©cran : #{CAPTURE_WIDTH} x #{CAPTURE_HEIGHT}"
    unless for_quick_test
      dire("Choisis les options : Minuteur : aucun, Microphone : microphone int√©gr√©. D√©cide de prendre ou non les clics de souris.")
    end

    if avec_assistant_operations
      if is_first_time && !for_quick_test
        dire("D√©marrage dans 10 secondes")
        sleep 4
        decompte("D√©marrage dans %{nombre_secondes}", 3)
      end
      unless for_quick_test
        dire("D√©marrage dans 5 secondes")
        decompte("D√©marrage dans %{nombre_secondes}", 4, 'Audrey')
      end
      dire("Mets en route la capture¬†!")

      # Boucle sur toutes les op√©rations
      # ou sur le rang d'op√©rations choisi
      # ----------------------------------
      played_operations ||= operations

      played_operations.each do |operation|
        notice "-> operation #{operation.titre}"
        op_start_time = Time.now.to_i
        # Calcul du temps de fin
        end_sleep_time = op_start_time + operation.duree_estimee
        `say -v Thomas -r 140 "#{operation.formated_action}"`
        sleep_reste = end_sleep_time - Time.now.to_i
        sleep_reste < 0 && sleep_reste = 0
        sleep sleep_reste
      end #/boucle sur toutes les op√©rations

      # √Ä la fin, on laisse encore 3 secondes pour finir
      sleep 3
      dire "Arr√™te maintenant la capture#{only_extrait ? '' : '  (les deux derni√®res secondes seront supprim√©es)'}. Puis reviens dans le Terminal."
    else
      # Sans assistant op√©rations, on attend la fin
      dire "Tu peux lancer la capture quand tu veux."
      dire "Lorsque tu auras fini, arr√™te la capture et reviens dans le Terminal."
    end

    is_first_time = false # si on remonte, on n'attendra moins
  end while !yesNo("Cette capture est-elle bonne¬†? (tape 'n' pour la recommencer)")


  # On va prendre la derni√®re capture effectu√©e pour la mettre en
  # fichier capture
  path_capture = only_extrait ? record_operations_extrait_path(range) : default_record_operations_path
  ViteFait.move_last_capture_in(path_capture)

  if operations_recorded?
    require_module('every/durees')

    notice <<-EOT

Op√©rations enregistr√©es avec succ√®s¬†! üëç

Dur√©e captur√©e : #{operations_duration.to_i.as_horloge}
Dur√©e tutoriel : #{tutoriel_duration.to_i.as_horloge}

Tu peux enregistrer la voix finale avec¬†:
    vite-faits assistant #{name} pour=voice
Tu peux demander l'assemblage avec¬†:
    vite-faits assemble #{name}

Tu peux lire le contenu des op√©rations avec¬†:
    vite-faits operations [#{name}]
Tu peux modifier ce document, dans Vim, avec¬†:
    vite-faits operations [#{name}] -e/--edit

    EOT
    save_last_logic_step
  else
    # Le fichier .mov de la capture n'a pas √©t√© produit‚Ä¶
    raise NotAnError.new("Sans fichier capture.mov, je ne peux pas poursuivre‚Ä¶")
  end

  yesOrStop("Tape 'y' pour poursuivre.")

  return true
end

# M√©thode appel√©e quand il existe d√©j√† un enregistrement des op√©rations,
# pour savoir s'il faut faire une nouvelle version ou d√©truire le fichier
def ask_for_new_version_or_destroy_record_operations
  puts <<-EOT

Une capture des op√©rations existe d√©j√†. Que dois-je
faire ?

  A Faire une nouvelle version (en mettant l'ancienne
    de c√¥t√©),

  B D√©truire la version existante pour la refaire
    compl√®tement.

  EOT
  while true
    case (getChar("Ton choix¬†:")||'').upcase
    when 'A'
      make_new_version_record_operations
      break
    when 'B'
      if yesNo("Confirmes-tu la DESTRUCTION D√âFINITIVE de l'enregistrement¬†?")
        IO.remove_with_care(record_operations_path,'record des op√©rations',false)
        IO.remove_with_care(record_operations_mp4, 'record des op√©rations (.mp4)',false)
        IO.remove_with_care(record_operations_ts,'record des op√©rations (.ts)',false)
        break
      end
    when 'Q'
      raise NotAnError.new()
    else
      error("Je ne connais pas ce choix")
    end
  end #/fin de boucle en attendant un choix valide
end #/ask_for_new_version_or_destroy_record_operations

# M√©thode pour produire une nouvelle version du fichier
def make_new_version_record_operations
  iversion = 0
  path_version = nil
  while path_version.nil?
    iversion += 1
    path_version = pathof(File.join('Operations',"capture-v#{iversion}.mp4"))
    path_version = nil if File.exists?(path_version)
  end
  # Il faut faire le fichier mp4 s'il n'existe pas
  # (noter qu'ici le fichier .mov existe forc√©ment)
  File.exists?(record_operations_mp4) || capture_to_mp4
  # On peut cr√©er la nouvelle version
  FileUtils.move(record_operations_mp4, path_version)
  notice "Version Operations/capture_v#{iversion}.mp4 produite¬†üëç"
  IO.remove_with_care(record_operations_ts,'record des op√©rations',false)

  if File.exists?(record_operations_mp4)
    raise NotAnError.new("Le fichier original (*) ne devrait pas exister‚Ä¶\n(*) #{record_operations_mp4}")
  end
  unless File.exists?(path_version)
    raise NotAnError.new("Le fichier version (*) devrait exister‚Ä¶\n(*) #{path_version}")
  end
  return true
end

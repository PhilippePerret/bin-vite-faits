# encoding: UTF-8
=begin
  Module pour cr√©er le tutoriel avec un assistant
=end
class ViteFait
class << self

  def create_with_assistant
    Command.clear_terminal
    notice "=== Bienvenue dans l'assistant de cr√©ation de tutoriels ‚Äúvite-faits‚Äù ==="
    notice "\nNous allons cr√©er ensemble le tutoriel de A √† Z, de la mise en place √† la diffusion et l'annonce."
    notice "Note : on peut aussi reprendre la cr√©ation l√† o√π on s'est arr√™t√©."

    # On demande le nom
    tuto_name = ask_for_tuto_name || return

    # On cr√©e une instance, √ßa sera plus facile
    tuto = new(tuto_name)

    # Si le tutoriel est d√©j√† achev√© est annonc√©, rien √† faire
    if tuto.completed_and_published?
      if COMMAND.options[:force]
        error "D√©sol√©, je ne sais pas encore forcer l'assistant √† traiter une cr√©ation forc√©e."
        return
      else
        notice "Le tutoriel ‚Äú#{tuto.titre}‚Äù est d√©j√† achev√© et publi√©. Il n'y a plus rien √† faire dessus‚Ä¶"
        puts "Si vraiment, tu veux recommencer utilise l'option `--force` avec l'assistant."
        return
      end
    end

    if tuto.exists?
      if yesNo("Ce tutoriel existe d√©j√†. Dois-je en poursuivre la cr√©ation ?")
        puts "Poursuite de la cr√©ation de #{tuto.name}. Faisons le point‚Ä¶"
      else
        return
      end
    else
      notice "Je cr√©e le dossier et tout le tralala du tutoriel‚Ä¶"
      tuto.create
    end

    if tuto.assiste_creation
      notice "\nTermin√© !"
    else
      notice "\n\nOK, on s'arr√™te l√†."
      notice "Tu pourras reprendre n'importe quand on tapant √† nouveau le nom du dossier '#{tuto.name}'"
    end

  ensure
    print "\n\n\n"
  end

  # ---------------------------------------------------------------------
  #   M√©thodes de demande
  # ---------------------------------------------------------------------
  def ask_for_tuto_name
    tuto_name = nil
    begin
      tuto_name = prompt("Nom du tutoriel")
      if tuto_name.nil?
        if yesNo("Voulez-vous vraiment arr√™ter ?")
          return nil
        end
      end
      if tuto_name.gsub(/[a-z\-]/,'') != ''
        error "Un nom de tutoriel ne doit comporter que des lettres minuscules et le signe moins."
        tuto_name = nil
      end
    end while tuto_name.nil?

    return tuto_name
  end

end #/<<self


  # ---------------------------------------------------------------------
  #   INSTANCE
  # ---------------------------------------------------------------------

  def assiste_creation
    ask_for_titre        unless titre
    ask_for_titre_en     unless titre_en
    ask_for_description  unless description

    # On enregistre les informations
    if titre || titre_en || description
      informations.set({titre: titre, titre_en:titre_en, description:description})
      # notice "Informations enregistr√©es."
    else
      notice "Aucune information pour le moment. Il faudra penser √† les rentrer."
    end

    unless titre_is_recorded?
      clear
      notice "Nous devons enregistrer LE TITRE ANIM√â"
      puts <<-EOT

Je vais ouvrir le mod√®le, il te suffira alors de :
  - r√©gler la largeur de fen√™tre et de faire un essai
  - r√©gler l'enregistrement (Cmd+Maj+5), sans son.
  - s'assurer que c'est tout l'√©cran qui est captur√©
  - lancer l'enregistrement et taper aussit√¥t le titre
  - arr√™ter la capture assez vite
  - d√©placer le fichier captur√© dans le dossier Titre.
EOT
      if yesNo("Clique 'y' pour que j'ouvre le titre mod√®le.")
        open_titre(nomessage = true)
        # Ouvrir aussi le dossier des captures et le dossier du tutoriel
        ViteFait.open_folder_captures
        open_in_finder(:chantier)
        if !yesNo("Tape 'y' lorsque tu auras fini, pour que je puisse finaliser le titre.")
          return false
        end
        unless titre_is_recorded?
          if !yesNo("As-tu bien d√©plac√© le fichier .mov dans le dossier 'Titre' ?\nSinon, ne tape rien, fais-le ‚Äî¬†sans changer le nom¬†‚Äî\net reviens taper 'y'.")
            return false
          end
        end
      else
        return false
      end

      unless titre_is_recorded?
        error "Tu n'as pas enregistr√© le titre. je dois renoncer."
        return false
      end
    end

    unless titre_final_converted?
      notice "Conversion du titre.mov en titre.mp4‚Ä¶"
      sleep 4
      titre_to_mp4
      unless titre_final_converted?
        error "Bizarrement, le titre n'a pas pu √™tre converti‚Ä¶"
        return error "Je dois m'arr√™ter l√†."
      end
    end

    unless vignette_finale_existe?
      clear
      notice "Nous devons cr√©er LA VIGNETTE"
      puts <<-EOT

Cette vignette sera utile dans YouTube et sur le forum Scrivener
Je vais ouvrir le mod√®le. Il suffira que :
  - tu r√®gles le titre,
  - tu exportes au format JPEG.

Noter que ce fichier Gimp est une copie de l'original.
Vous pouvez donc le modifier et l'enregistrer sans souci.
      EOT
      if yesNo("Ouvrir le mod√®le¬†?")
        open_vignette
        if !yesNo("Tape 'y' lorsque tu auras fini, pour que nous puissions poursuivre.")
          return false
        end
      else
        return false
      end

      unless vignette_finale_existe?
        return error "Tu n'as pas cr√©√© la vignette finale‚Ä¶ Je dois renoncer."
      end
    end


    unless capture_is_recorded?
      clear
      notice "Enregistrement des OP√âRATIONS"
      puts <<-EOT

Voil√† le gros morceau¬†! Il s'agit de produire le fichier .mov qui
va contenir toutes les op√©rations √† ex√©cuter.

Voil√† la proc√©dure :

    - pr√©parer le fichier Scrivener (que je vais ouvrir),
    - brancher ton casque iPhone pour enregistrer la voix,
    - Cmd+Alt+H pour masquer les autres applications,
    - taper Cmd+Maj+5 pour demander la capture,
    - s'assurer que tout l'√©cran soit captur√©
    - r√©gler l'enregistrement du son (m√™me si aucune voix, obligatoire)
    - lancer la capture,
    - ex√©cuter les op√©rations.
    - arr√™ter la capture √† la fin des op√©rations.

Apr√®s la capture¬†:
    - glisser le fichier captur√© (le dossier des captures est ouvert)
      dans le dossier du tutoriel (qui est ouvert aussi)
    - revenir ici pour cliquer 'y' et poursuivre,
    - Ouf !

      EOT

      unless yesNo("Tape 'y' d√®s que tu es pr√™t et j'ouvre le fichier Scrivener.")
        return false
      end
      ViteFait.open_folder_captures
      open_in_finder(:chantier)
      open_scrivener_file

      unless yesNo("Tout est pr√™t¬†? La capture a √©t√© faite¬†? Nous pouvons poursuivre ?")
        return false
      end

      if src_path(noalert=true).nil?
        error "[NON FATAL] Je ne trouve pas le fichier .mov dans le dossier du tutoriel."
        unless yesNo("As-tu pens√© √† le glisser depuis le dossier capture jusqu'au dossier de #{name} ? (tel quel, sans changer de nom).\nSinon ne tape rien, fais-le et reviens taper 'y' ici.")
          return false
        end
        if src_path.nil?
          return error "[FATAL] Je ne trouve toujours pas le fichier‚Ä¶ Je dois renoncer."
        end
      end
    end

    # On peut enfin proc√©der √† l'assemblage
    unless video_finale_existe?
      clear
      notice "Je vais proc√©der √† l'assemblage. Il faudra atten-\ndre un peu."
      puts "\nC'est assez long, pendant ce temps, tu peux vaquer\n√† d'autres occupations."
      sleep 5
      assemble(nomessage = true)

      clear
      puts <<-EOT
L'assemblage a √©t√© effecut√© avec succ√®s, mais peut-√™tre faut-il le
modifier dans ScreenFlow.

      EOT
      unless yesNo("Pr√™t √† poursuivre ?")
        return false
      end
    end

    unless video_uploaded_on_youtube?
      clear
      notice "Tu dois proc√©der √† l'UPLOAD SUR YOUTUBE."
      puts <<-EOT
Je vais ouvrir ta chaine et il te suffira de d√©poser la vid√©o.

Tu pourras mettre en description¬†:
Dans la s√©rie des vites-faits, un tutoriel #{description}

Si tu n'as pas le bon compte, celui de cette chaine est avec le compte
yahoo et le code normal.

      EOT
      yesNo("Es-tu pr√™t¬†?") || (return false)
      chaine_youtube
      yesNo("La vid√©o est upload√©e ? Pr√™t √† poursuivre ?") || (return false)
      unless video_uploaded_on_youtube?
        informations.set(uploaded_on_youtube: true)
      end
    end

    unless youtube_id_defined?
      clear
      notice "Nous devons d√©finir l'ID YOUTUBE de la vid√©o."
      yid = prompt("ID youtube")
      yid || (return false)
      informations.set(youtube_id: yid)
    end

    unless annonce_facebook_deposed?
      clear
      notice "Nous allons proc√©der √† l'annonce sur FB."
      unless yesNo("Pr√™t¬†?")
        return false
      end
      COMMAND.params.merge!(pour: 'facebook')
      annonce
      yesNo("Pr√™t √† poursuivre ?") || (return false)
    end

    unless annonce_forum_scrivener_deposed?
      clear
      notice "Nous allons proc√©der √† l'annonce sur le forum Scrivener."
      unless yesNo("Pr√™t¬†?")
        return false
      end
      COMMAND.params.merge!(pour: 'scrivener')
      annonce
      unless yesNo("Pr√™t √† poursuivre ?")
        return false
      end
    end

    clear
    notice "Nous en avons termin√© avec ce tutoriel¬†!"
    notice "Bravo ! üëè üëè üëè"
    notice "√Ä quand le prochain¬†?"

    unless infos_existent?
      input_infos
    end

    return true
  end #/ assistant de l'instance


  # --- STATES ---

  def completed_and_published?
    File.exists?(completed_path) &&
      video_uploaded_on_youtube? &&
      annonce_forum_scrivener_deposed? &&
      annonce_facebook_deposed?
  end

  def vignette_finale_existe?
    File.exists?(vignette_path)
  end

  def titre_is_recorded?
    titre_mov && File.exists?(titre_mov)
  end

  def titre_final_converted?
    titre_mov && File.exists?(titre_mp4)
  end

  def capture_is_recorded?
    src_path(noalert = true) && File.exists?(src_path)
  end

  def capture_ts_existe?
    src_path(noalert = true) && File.exists?(mp4_path)
  end

  def video_finale_existe?
    File.exists?(completed_path)
  end

  def video_uploaded_on_youtube?
    informations.data[:uploaded_on_youtube]
  end

  def annonce_facebook_deposed?
    informations.data[:annonce_facebook]
  end

  def annonce_forum_scrivener_deposed?
    informations.data[:annonce_scrivener]
  end

  def youtube_id_defined?
    informations.data[:youtube_id]
  end

  def infos_existent?
    return true # TODO
  end


  def ask_for_titre
    clear
    puts "Nous devons d√©terminer le titre humain du tutoriel"
    puts "Le choisir avec soin car il sera utilis√© dans les annonces et autre."
    puts "(mais vous pourrez toujours le red√©finir par vite-faits infos #{name} titre='new_titre')"
    res = prompt("Titre humain")
    clear
    if res.nil?
      puts "OK, pas de titre pour le moment‚Ä¶"
    else
      @titre = res
    end
  end

  def ask_for_titre_en
    puts "J'ai besoin du titre anglais (pour le forum Scrivener)"
    puts "(tu pourras toujours le red√©finir par vite-faits infos #{name} titre_en='new_titre')"
    res = prompt("Titre anglais")
    clear
    if res.nil?
      puts "OK, pas de titre anglais pour le moment‚Ä¶"
    else
      @titre_en = res
    end
  end

  def ask_for_description
    puts "Une description en une phrase, pour accompagner les messages."
    res = prompt("Description")
    clear
    if res.nil?
      puts "OK, pas de description pour le moment‚Ä¶"
    else
      @description = res
    end
  end

  def clear
    puts "\n\n"
    Command.clear_terminal
  end

end #/ViteFait

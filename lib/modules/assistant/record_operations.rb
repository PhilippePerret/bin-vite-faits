# encoding: UTF-8
=begin

  Module d'assistance √† la cr√©ation de la vid√©o des
  op√©rations du tutoriel.

=end


# Assistant pour la r√©alisation des op√©rations, en les lisant
# Note : pour l'utiliser ailleurs que dans l'assistant g√©n√©ral,
# il faut l'entourer d'un rescue¬†:
#   begin
#     require_module('assistant/record_operations')
#     exec
#   rescue NotAnError => e
#     e.puts_error_if_message
#   end
#
# Note : les +options+ ne servent √† rien, pour le moment.
#
def exec(options=nil)
  # Le fichier des op√©rations est requis

  avec_assistant_operations = file_operations_exists?

  clear
  notice "=== Enregistrement de la voix finale ==="
  puts <<-EOT

Je vais t'accompagner au cours de toutes les
op√©rations √† ex√©cuter.

√Ä tout moment, si √ßa ne se passe pas bien, tu
peux interrompre la capture √† l'aide de CTRL-C.

  EOT

  if avec_assistant_operations
    puts <<-EOT
  Les op√©rations du tutoriel √©tant d√©finies, je vais
  pouvoir t'accompagner dans le d√©tail.

    EOT
  end

  yesOrStop("Pr√™t √† commencer ?‚Ä¶")

  begin #Boucle jusqu'√† ce qu'on arrive √† une vid√©o acceptable

    dire("Active Scrivener et masque les autres applications avec Commande + Alte + H")
    sleep 3
    dire("Active la capture et r√®gle la sur : tout l'√©cran, Minuteur : aucun, Microphone : microphone int√©gr√©")
    sleep 4
    dire("D√©marrage dans 10 secondes")
    decompte("D√©marrage dans %{nombre_secondes}", 3)
    dire("D√©marrage dans 5 secondes")
    decompte("D√©marrage dans %{nombre_secondes}", 4, 'Audrey')
    dire("C'est parti ! Mets en route la capture¬†!")

    if avec_assistant_operations
      get_operations.each do |operation|
        if operation[:duration]
          end_sleep_time = Time.now.to_i + operation[:duration]
        end
        `say -v Thomas -r 140 "#{operation[:assistant]}"`
        if operation[:duration]
          sleep_reste = end_sleep_time - Time.now.to_i
          sleep_reste < 0 && sleep_reste = 0
        else
          sleep_reste = 1
        end
        sleep sleep_reste
      end #/boucle sur toutes les op√©rations
      # √Ä la fin, on laisse encore 3 secondes pour finir
      sleep 3
      dire "Arr√™te maintenant la capture. Et reviens dans le Terminal."
    else
      # Sans assistant op√©rations, on attend la fin
      dire "Lorsque tu auras fini, arr√™te la capture et reviens dans le Terminal."
    end

  end while !yesNo("Cette capture est-elle bonne¬†? (tape 'n' pour la recommencer)")

  # On va prendre la derni√®re capture effectu√©e pour la mettre en
  # fichier capture
  ViteFait.move_last_capture_in(default_source_path)

  if operations_are_recorded?

    notice <<-EOT

Op√©rations enregistr√©es avec succ√®s¬†! üëç

Tu peux enregistrer la voix finale avec¬†:
    vite-faits assistant #{name} pour=voice
Tu peux demander l'assemblage avec¬†:
    vite-faits assemble #{name}

    EOT
  else
    # Le fichier .mov de la capture n'a pas √©t√© produit‚Ä¶
    raise NotAnError.new("Sans fichier capture.mov, je ne peux pas poursuivre‚Ä¶")
  end

  return yesNo("Tape 'y'.")
end

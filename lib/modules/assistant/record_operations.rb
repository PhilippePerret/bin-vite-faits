# encoding: UTF-8
=begin

  Module d'assistance √† la cr√©ation de la vid√©o des
  op√©rations du tutoriel.

=end


# Assistant pour la r√©alisation des op√©rations, en les lisant
# Note : pour l'utiliser ailleurs que dans l'assistant g√©n√©ral,
# il faut l'entourer d'un rescue¬†:
#   begin
#     require_module('assistant/record_operations')
#     exec
#   rescue NotAnError => e
#     e.puts_error_if_message
#   end
#
# Note : les +options+ ne servent √† rien, pour le moment.
#
def exec(options=nil)

  # Ouvrir toujours le projet Scrivener (en r√©alit√© : une copie du
  # projet pr√©par√©)
  open_something('scrivener') || raise(NotAnError.new)

  clear
  `open -a Terminal`
  notice "=== Enregistrement des op√©rations ==="

  # Si un fichier capture.mov existe d√©j√†, on demande √† l'utilisateur
  # si on doit le d√©truire pour le recommencer
  if operations_are_recorded?
    error "\n[NON FATAL] Une capture des op√©rations existe d√©j√†."
    choix_final = false
    if yesNo("Dois-je le d√©truire pour recommencer ?")
      choix_final = yesNo("Confirmes-tu la DESTRUCTION D√âFINITIVE de l'enregistrement¬†?")
    end
    choix_final || return
    IO.remove_with_care(src_path,'fichier source principal',false)

  end

  # Pour savoir si on doit enregistrer avec l'assistant des
  # op√©rations ou sans.
  avec_assistant_operations = operations_are_defined?


  puts <<-EOT

Je vais t'accompagner au cours des op√©rations
√† ex√©cuter.


√Ä tout moment, si √ßa ne se passe pas bien, tu
peux interrompre la capture √† l'aide de CTRL-C.

  EOT

  if avec_assistant_operations
    puts <<-EOT
  Les op√©rations du tutoriel √©tant d√©finies, je vais
  pouvoir t'accompagner dans le d√©tail.

    EOT
  else
    puts <<-EOT
  S'il y avait un fichier d√©finissant les op√©rations,
  je pourrais t'accompagner beaucoup mieux."

    EOT
  end

  yesOrStop("Pr√™t √† commencer ?‚Ä¶")

  is_first_time = true

  begin #Boucle jusqu'√† ce qu'on arrive √† une vid√©o acceptable

    dire("Active Scrivener et masque les autres applications avec Commande, ALTE, H")
    sleep 3 if is_first_time
    dire("Active la capture et r√®gle-la avec les valeurs : tout l'√©cran, Minuteur : aucun, Microphone : microphone int√©gr√©")

    if avec_assistant_operations
      if is_first_time
        dire("D√©marrage dans 10 secondes")
        sleep 4
        decompte("D√©marrage dans %{nombre_secondes}", 3)
      end
      dire("D√©marrage dans 5 secondes")
      decompte("D√©marrage dans %{nombre_secondes}", 4, 'Audrey')
      dire("Mets en route la capture¬†!")

      # Boucle sur toutes les op√©rations
      # --------------------------------

      get_operations.each do |operation|
        op_start_time = Time.now.to_i

        # Il faudrait savoir si la voix √† dire sera plus longue que la voix
        # de Thomas. On part du principe que la longueur * coefficiant donne
        # le temps du texte.
        duree_definie = operation[:duration] || 0
        duree_assistant = (operation[:assistant].length * COEF_DICTION).with_decimal(1)
        duree_voice     = (operation[:voice].length * COEF_DICTION).with_decimal(1)
        duree_operationnelle = [duree_definie, duree_assistant, duree_voice].max

        # Calcul du temps de fin
        end_sleep_time = op_start_time + duree_operationnelle

        `say -v Thomas -r 140 "#{operation[:assistant]}"`
        sleep_reste = end_sleep_time - Time.now.to_i
        sleep_reste < 0 && sleep_reste = 0
        sleep sleep_reste
      end #/boucle sur toutes les op√©rations



      # √Ä la fin, on laisse encore 3 secondes pour finir
      sleep 3
      dire "Arr√™te maintenant la capture (les deux derni√®res secondes seront supprim√©es). Puis reviens dans le Terminal."
    else
      # Sans assistant op√©rations, on attend la fin
      dire "Tu peux lancer la capture quand tu veux."
      dire "Lorsque tu auras fini, arr√™te la capture et reviens dans le Terminal."
    end

    is_first_time = false # si on remonte, on n'attendra moins
  end while !yesNo("Cette capture est-elle bonne¬†? (tape 'n' pour la recommencer)")

  # On va prendre la derni√®re capture effectu√©e pour la mettre en
  # fichier capture
  ViteFait.move_last_capture_in(default_source_path)

  if operations_are_recorded?

    notice <<-EOT

Op√©rations enregistr√©es avec succ√®s¬†! üëç

Tu peux enregistrer la voix finale avec¬†:
    vite-faits assistant #{name} pour=voice
Tu peux demander l'assemblage avec¬†:
    vite-faits assemble #{name}

Tu peux lire le contenu des op√©rations avec¬†:
    vite-faits operations [#{name}]
Tu peux modifier ce document, dans Vim, avec¬†:
    vite-faits operations [#{name}] -e/--edit

    EOT
  else
    # Le fichier .mov de la capture n'a pas √©t√© produit‚Ä¶
    raise NotAnError.new("Sans fichier capture.mov, je ne peux pas poursuivre‚Ä¶")
  end

  yesOrStop("Tape 'y' pour poursuivre.")
end

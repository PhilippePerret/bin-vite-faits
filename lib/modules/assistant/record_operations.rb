# encoding: UTF-8
=begin

  Module d'assistance √† la cr√©ation de la vid√©o des
  op√©rations du tutoriel.

=end


# Assistant pour la r√©alisation des op√©rations, en les lisant
# Note : pour l'utiliser ailleurs que dans l'assistant g√©n√©ral,
# il faut l'entourer d'un rescue¬†:
#   begin
#     require_module('assistant/record_operations')
#     exec
#   rescue NotAnError => e
#     e.puts_error_if_message
#   end
#
# Note : les +options+ ne servent √† rien, pour le moment.
#
def exec(options=nil)

  # Ouvrir toujours le projet Scrivener (en r√©alit√© : une copie du
  # projet pr√©par√©)
  open_something('scrivener') || raise(NotAnError.new)

  clear
  `open -a Terminal`
  notice "=== Enregistrement des op√©rations ==="

  # Si un fichier capture.mov existe d√©j√†, on demande √† l'utilisateur
  # si on doit le d√©truire pour le recommencer
  if operations_recorded?
    ask_for_new_version_or_destroy_record_operations
  end

  # Pour savoir si on doit enregistrer avec l'assistant des
  # op√©rations ou sans.
  avec_assistant_operations = operations_defined?


  puts <<-EOT

Je vais t'accompagner au cours des op√©rations
√† ex√©cuter.


√Ä tout moment, si √ßa ne se passe pas bien, tu
peux interrompre la capture √† l'aide de CTRL-C.

  EOT

  if avec_assistant_operations
    puts <<-EOT
  Les op√©rations du tutoriel √©tant d√©finies, je vais
  pouvoir t'accompagner dans le d√©tail.

    EOT
  else
    puts <<-EOT
  S'il y avait un fichier d√©finissant les op√©rations,
  je pourrais t'accompagner beaucoup mieux."

    EOT
  end

  yesOrStop("Pr√™t √† commencer ?‚Ä¶")

  is_first_time = true

  begin #Boucle jusqu'√† ce qu'on arrive √† une vid√©o acceptable

    dire("Active Scrivener et masque les autres applications avec Commande, ALTE, H")
    sleep 3 if is_first_time
    dire("Active la capture et r√®gle-la avec les valeurs : tout l'√©cran, Minuteur : aucun, Microphone : microphone int√©gr√©")

    if avec_assistant_operations
      if is_first_time
        dire("D√©marrage dans 10 secondes")
        sleep 4
        decompte("D√©marrage dans %{nombre_secondes}", 3)
      end
      dire("D√©marrage dans 5 secondes")
      decompte("D√©marrage dans %{nombre_secondes}", 4, 'Audrey')
      dire("Mets en route la capture¬†!")

      # Boucle sur toutes les op√©rations
      # --------------------------------

      operations.each do |operation|
        op_start_time = Time.now.to_i
        # Calcul du temps de fin
        end_sleep_time = op_start_time + operation.duree_estimee
        `say -v Thomas -r 140 "#{operation.formated_assistant}"`
        sleep_reste = end_sleep_time - Time.now.to_i
        sleep_reste < 0 && sleep_reste = 0
        sleep sleep_reste
      end #/boucle sur toutes les op√©rations

      # √Ä la fin, on laisse encore 3 secondes pour finir
      sleep 3
      dire "Arr√™te maintenant la capture (les deux derni√®res secondes seront supprim√©es). Puis reviens dans le Terminal."
    else
      # Sans assistant op√©rations, on attend la fin
      dire "Tu peux lancer la capture quand tu veux."
      dire "Lorsque tu auras fini, arr√™te la capture et reviens dans le Terminal."
    end

    is_first_time = false # si on remonte, on n'attendra moins
  end while !yesNo("Cette capture est-elle bonne¬†? (tape 'n' pour la recommencer)")


  # On va prendre la derni√®re capture effectu√©e pour la mettre en
  # fichier capture
  ViteFait.move_last_capture_in(default_record_operations_path)

  if operations_recorded?
    require_module('duree')

    notice <<-EOT

Op√©rations enregistr√©es avec succ√®s¬†! üëç

Dur√©e captur√©e : #{operations_duration.as_horloge}
Dur√©e tutoriel : #{tutoriel_duration.as_horloge}

Tu peux enregistrer la voix finale avec¬†:
    vite-faits assistant #{name} pour=voice
Tu peux demander l'assemblage avec¬†:
    vite-faits assemble #{name}

Tu peux lire le contenu des op√©rations avec¬†:
    vite-faits operations [#{name}]
Tu peux modifier ce document, dans Vim, avec¬†:
    vite-faits operations [#{name}] -e/--edit

    EOT
    save_last_logic_step
  else
    # Le fichier .mov de la capture n'a pas √©t√© produit‚Ä¶
    raise NotAnError.new("Sans fichier capture.mov, je ne peux pas poursuivre‚Ä¶")
  end

  yesOrStop("Tape 'y' pour poursuivre.")
end

# M√©thode appel√©e quand il existe d√©j√† un enregistrement des op√©rations,
# pour savoir s'il faut faire une nouvelle version ou d√©truire le fichier
def ask_for_new_version_or_destroy_record_operations
  puts <<-EOT

Une capture des op√©rations existe d√©j√†. Que dois-je
faire ?

  A Faire une nouvelle version (en mettant l'ancienne
    de c√¥t√©),

  B D√©truire la version existante pour la refaire
    compl√®tement.

  EOT
  while true
    case (getChar("Ton choix¬†:")||'').upcase
    when 'A'
      make_new_version_record_operations
      break
    when 'B'
      if yesNo("Confirmes-tu la DESTRUCTION D√âFINITIVE de l'enregistrement¬†?")
        IO.remove_with_care(record_operations_path,'record des op√©rations',false)
        IO.remove_with_care(record_operations_mp4, 'record des op√©rations (.mp4)',false)
        IO.remove_with_care(record_operations_ts,'record des op√©rations (.ts)',false)
        break
      end
    when 'Q'
      raise NotAnError.new()
    else
      error("Je ne connais pas ce choix")
    end
  end #/fin de boucle en attendant un choix valide
end #/ask_for_new_version_or_destroy_record_operations

# M√©thode pour produire une nouvelle version du fichier
def make_new_version_record_operations
  iversion = 0
  path_version = nil
  while path_version.nil?
    iversion += 1
    path_version = pathof(File.join('Operations',"capture-v#{iversion}.mp4"))
    path_version = nil if File.exists?(path_version)
  end
  # Il faut faire le fichier mp4 s'il n'existe pas
  # (noter qu'ici le fichier .mov existe forc√©ment)
  File.exists?(record_operations_mp4) || capture_to_mp4
  # On peut cr√©er la nouvelle version
  FileUtils.move(record_operations_mp4, path_version)
  notice "Version Operations/capture_v#{iversion}.mp4 produite¬†üëç"
  IO.remove_with_care(record_operations_ts,'record des op√©rations',false)

  if File.exists?(record_operations_mp4)
    raise NotAnError.new("Le fichier original (*) ne devrait pas exister‚Ä¶\n(*) #{record_operations_mp4}")
  end
  unless File.exists?(path_version)
    raise NotAnError.new("Le fichier version (*) devrait exister‚Ä¶\n(*) #{path_version}")
  end
  return true
end

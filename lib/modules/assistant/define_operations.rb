# encoding: UTF-8
=begin
  Module d'assistance √† la d√©finition des op√©rations
  √† ex√©cuter dans le tutoriel.
=end

# Assistant pour la cr√©ation du fichier op√©rations
# Cette m√©thode doit √™tre appel√©e entre des :
#   begin
#     exec
#   rescue NotAnError => e
#     e.puts_error_if_message
#   end
def exec(options=nil)

  clear

  # Si un fichier des op√©rations existe d√©j√†, il faut demander ce qu'il
  # faut faire avec, le refaire, le poursuivre ou continuer sans rien
  # toucher.
  if operations_are_defined?
    notice "=== D√©finitions des op√©rations ==="
    demande = <<-EOD

  Le fichier des op√©rations existe. Que dois-je faire¬†?

    A: le d√©truire pour recommencer,
    B: le poursuivre avec cet assistant,
    C: l'√©diter avec Vim
    D: ne rien changer.

>>>
    EOD
    case (getChar(demande)||'').upcase
    when 'A'
      # D√©truire le fichier
      IO.remove_with_care(operations_path,'fichier des op√©rations',false)
    when 'B'
      # Poursuivre le fichier
    when 'C'
      # √âditer le fichier avec Vim
      puts texte_ouverture_dans_Vim
      open_operations_file
      return yesNo("Tape 'y' pour poursuivre.")
    when 'D'
      return true
    else
      error "Je ne comprends pas ce choix. Je ne fais rien."
      return
    end
  else
    # <= Le fichier op√©rations n'est pas encore cr√©√©
    # => on affiche un texte informatif.
    clear
    notice "=== D√©finition des op√©rations ==="
    puts <<-EOT

Nous allons d√©finir les op√©rations √† ex√©cuter dans ce
tutoriel. Cela consiste √† d√©finir¬†:

  id:           Un identifiant unique de l'op√©ration,

  titre:        Le titre qui r√©sume l'op√©ration en
                question.

  voice:        Le texte que je devrais dire sur les
                op√©rations ex√©cut√©es pour expliquer au
                spectateur de la vid√©o ce qui doit √™tre
                fait.

  assistant:    L'op√©ration √† ex√©cuter, qui sera dite
                par l'assistant lors de la cr√©ation as-
                sist√©e. Ce texte doit d√©crire ce qu'il
                faut faire pr√©cis√©ment.

  duration:     La dur√©e optionnelle de l'op√©ration, si
                les textes sont trop courts par exemple.
                Si cette valeur n'est pas d√©finie expli-
                citement, elle sera calcul√©e d'apr√®s la
                longueur du plus grand texte (entre l'as-
                sitant et la 'voice'). Ce qui fait que
                cette dur√©e peut coller presque parfaite-
                ment au texte qui sera dit dans le tuto-
                riel.

    EOT

  end

  @operations = get_all_operations_voulues(operations)

  puts "Fichier qui va √™tre produit :"
  puts YAML.dump(Operation.to_hash(self))

  yesOrStop("\nDois-je proc√©der √† la fabrication du fichier¬†?")

  # Cr√©er le dossier s'il n'existe pas
  `mkdir -p "#{operations_folder}"`

  File.open(operations_path,'wb'){|f| f.write YAML.dump(Operation.to_hash(self))}

  if operations_are_defined?
    notice "Fichier des op√©rations enregistr√© avec succ√®s.¬†üëç"
    puts <<-EOT
  Tu peux jouer la commande suivante pour que l'assistant
  te lise les op√©rations √† ex√©cuter¬†:
      vite-faits assistant #{name} pour=capture
  Tu peux jouer la commande suivante pour afficher le texte √† dire par la voix finale¬†:
      vite-faits assistant #{name} pour=voice

    EOT
  else
    # Le fichier n'a pas √©t√© enregistr√©
    error "üö´¬†¬†Bizarrement, je ne trouve pas le fichier des op√©rations‚Ä¶"
  end
end #/exec

def get_all_operations_voulues(operations)
  operations_ids = {}
  operations.each { |op| operations_ids.merge!( op.id => true ) }

  while true
    # identifiant de l'op√©ration
    begin
      # operation_id = prompt("\nID nouvelle op√©ration (rien pour interrompre)")
      puts "\n"
      operation_id = promptBlink('ID', 'ID de l‚Äôop√©ration (rien pour finir)')
      if operation_id.nil? || operation_id == 'q'
        return operations
      end
    end while operation_id_invalid?(operation_id, operations_ids)
    raise NotAnError.new() if operation_id == 'q'

    # Titre de l'op√©ration
    begin
      operation_titre = promptBlink('TITRE', 'TITRE de l‚Äôop√©ration')
    end while operation_titre.nil?
    raise NotAnError.new() if operation_titre == 'q'

    # Manipulation √† op√©rer
    begin
      operation_assistant = promptBlink('AIDE ASSISTANT', 'AIDE ASSISTANT pour l‚Äôop√©ration')
    end while operation_assistant.nil?
    raise NotAnError.new() if operation_assistant == 'q'

    # Texte de la voix finale
    begin
      operation_voice = promptBlink('TEXTE VOIX', "TEXTE de la voix finale du tutoriel")
    end while operation_voice.nil?
    raise NotAnError.new() if operation_voice == 'q'

    operation_duration = promptBlink('DUR√âE', "DUR√âE forc√©e (en secondes)")
    raise NotAnError.new() if operation_duration == 'q'
    operation_duration.nil? || operation_duration = operation_duration.to_i

    @operations << Operation.new({
      id:         operation_id,
      titre:      operation_titre,
      assistant:  operation_assistant,
      voice:      operation_voice,
      duration:   operation_duration
    })

    # Pour checker l'unicit√© des identifiants d'op√©ration
    operations_ids.merge!(operation_id => true)

    clear
  end
end

# Retourne true si l'identifiant d'op√©ration +op_id+ est valide
def operation_id_invalid?(op_id, operations_ids)
  op_id.nil? && raise("Il faut d√©finir l'identifiant unique de l'op√©ration.")
  operations_ids.key?(op_id) && raise("Cet identifiant est d√©j√† utilis√© par une op√©ration.")
  return false
rescue Exception => e
  error(e.message)
  error("Mettre l'id √† 'q' pour renoncer.")
  return true
end

def texte_ouverture_dans_Vim
  <<-EOT
Je vais ouvrir le fichier dans Vim pour le mettre
en √©dition. Modifie-le √† ta guise, puis enregistre-
le et quitte l'√©dition avec `:wq` et reviens ici
pour poursuivre.
  EOT
end
